help()
install.packages(c("ggmap", "rgdal", "rgeos", "maptools", "dplyr", "tidyr", "tmap"))
# install packages
x <- c("ggmap", "sp", "rgdal", "rgeos", "maptools", "ggplot2", "dplyr", "tidyr", "tmap", "leaftlet", "magrittr", "readr", "lubridate", "RColorBrewer", "classInt")
install.packages(x) # warning: this may take a number of minutes
# load packages
lapply(x, library, character.only = TRUE) # load the required packages
x <- c("ggmap", "sp", "rgdal", "rgeos", "maptools", "ggplot2", "dplyr", "tidyr", "tmap", "leaflet", "magrittr", "readr", "lubridate", "RColorBrewer", "classInt")
# install packages
x <- c("ggmap", "sp", "rgdal", "rgeos", "maptools", "ggplot2", "dplyr", "tidyr", "tmap", "leaflet", "magrittr", "readr", "lubridate", "RColorBrewer", "classInt")
install.packages(x) # warning: this may take a number of minutes
# load packages
lapply(x, library, character.only = TRUE) # load the required packages
install.packages(x)
crime_df <- read.csv("data/crime.csv")
library(ggmap)
crime_df <- read.csv("data/crime.csv")
library(ggmap)
crime_df <- read.csv("data/crime.csv")
data(crime)
library("ggmap")
crime_df <- read.csv("data/crime.csv")
library("ggmap")
crime_df <- read.csv("data/crime.csv")
data(crime)
crime
crime_df <- data(crime)
head(crime_df)
head(data(crime))
data(crime)
str(crime)
crime_df <- data.frame(data(crime))
head(crime_df)
crime_df <- data.frame(crime)
head(crime_df)
length(crime_df)
summary(crime_df)
# remove NA values
crime_df <- filter(crime_df, lon != 'NA')
# see summary stats
summary(crime_df)
crime_df['lon']
crime_df.lon
crime_df['lon' == 'NA']
crime_df[crime_df$lon == 'NA']
View(crime_df)
View(crime_df)
crime_df <- filter(crime_df, lon != 'NA')
summary(crime_df)
?SpatialPoint
?SpatialPoints
?proj4string
?CRS
?saveRDS
?RDS
??RDS
?saveRDS
?plot
unzip("conservation-area-map-shp.zip")
unzip("conservation-area-map-shp.zip", exdir='.')
setwd(".")
unzip("conservation-area-map-shp.zip", exdir='.')
unzip("./conservation-area-map-shp.zip", exdir='.')
x <- c("ggmap", "sp", "rgdal", "rgeos", "maptools", "ggplot2", "dplyr", "tidyr", "tmap", "leaftlet", "magrittr", "readr", "lubridate", "RColorBrewer", "classInt")
install.packages(x) # warning: this may take a number of minutes
# load packages
lapply(x, library, character.only = TRUE) # load the required packages%
setwd(".")
x <- c("ggmap", "sp", "rgdal", "rgeos", "maptools", "ggplot2", "dplyr", "tidyr", "tmap", "leaftlet", "magrittr", "readr", "lubridate", "RColorBrewer", "classInt")
lapply(x, library, character.only = TRUE) # load the required packages%
x <- c("ggmap", "sp", "rgdal", "rgeos", "maptools", "ggplot2", "dplyr", "tidyr", "tmap", "leaflet", "magrittr", "readr", "lubridate", "RColorBrewer", "classInt")
lapply(x, library, character.only = TRUE) # load the required packages%
map_data <- get_map(location='singapore', source='osm', zoom=14)
sgmap <- ggmap(map_data, extent='device', legend='topleft')
sgmap
map_data <- get_map(location='houston', source='osm', zoom=14)
sgmap <- ggmap(map_data, extent='device', legend='topleft')
map_data <- get_map(location='new york', source='osm', zoom=14)
?get_map
map_data <- get_map(location='new york', source='google', zoom=14)
sgmap <- ggmap(map_data, extent='device', legend='topleft')
packages = c('ggplot2', 'car')
install.packages(packages)
lapply(packages, require, character.only = TRUE)
x <- runif(100, 0, 10)  # runif is a method for generating a uniform distribution
y <- 1 + 2 * x + rnorm(100, 0, 1) # rnorm is a method for generating a normal dist
m <- lm(y ~ x)
summary(m)
par(mfrow=c(2,2))
plot(m)
jpeg("./images/reference_diagnostic_plot.jpeg", width = 3.5, height = 2.5, units = 'in', res = 500)
plot(m)
dev.off()
jpeg("./images/reference_diagnostic_plot.jpeg", width = 3.5, height = 2.5, units = 'in', res = 500)
plot(m)
setwd("/Users/davidtan/Code/learn-r/data-analytics-with-r/Final Project/Project Data")
jpeg("./images/reference_diagnostic_plot.jpeg", width = 3.5, height = 2.5, units = 'in', res = 500)
plot(m)
dev.off()
day_data <- read.csv('./day.csv')
instant <- day_data$instant
dteday <- day_data$dteday
season <- day_data$season
yr <- day_data$yr
mnth <- day_data$mnth
hr <- day_data$hr
holiday <- day_data$holiday
weekday <- day_data$weekday
workingday <- day_data$workingday
weathersit <- day_data$weathersit
temp <- day_data$temp
atemp <- day_data$atemp
hum <- day_data$hum
windspeed <- day_data$windspeed
casual <- day_data$casual
registered <- day_data$registered
cnt <- day_data$cnt
day_lm_model1 <- lm(cnt ~ factor(season) + factor(holiday) + factor(weekday) + factor(workingday) + factor(weathersit) + temp + hum + windspeed, data=day_data)
vif(day_lm_model1) # all generalized variance-inflation factors are < 4. so we need not drop any variables
summary(day_lm_model1)
day_df = data.frame(day_data) # Creating a data frame because ggplot2 requires it
ggplot(day_df, aes(factor(holiday), casual)) + geom_boxplot(outlier.colour = 'red')
ggplot(day_df, aes(factor(holiday), cnt)) + geom_boxplot(outlier.colour = 'red')
